# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import django.contrib.gis.db.models.fields
from django.conf import settings


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0001_initial'),
        ('location', '__first__'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=255)),
                ('description', models.CharField(max_length=255)),
                ('picture_flag', models.BooleanField(default=False)),
                ('picture_path', models.CharField(max_length=255, unique=True, null=True, blank=True)),
                ('is_bonus', models.BooleanField(default=False)),
                ('is_promoted', models.BooleanField(default=False)),
                ('geographic_target_flag', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_deleted', models.DateTimeField(null=True, blank=True)),
                ('geographic_target', models.ForeignKey(blank=True, to='location.GeographicTarget', null=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Dashboard',
            fields=[
                ('user', models.ForeignKey(related_name='dashboard', primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('date_calculated_subscribed_most_listened_users', models.DateTimeField(auto_now_add=True)),
                ('date_calculated_subscribed_most_listened_libraries', models.DateTimeField(auto_now_add=True)),
                ('date_calculated_explore_top_users', models.DateTimeField(auto_now_add=True)),
                ('date_calculated_explore_top_libraries', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_user_deleted', models.BooleanField(default=False)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='FacebookShare',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('user_facebook_share', models.BigIntegerField(default=1)),
                ('shared_yap_flag', models.BooleanField(default=False)),
                ('shared_user_flag', models.BooleanField(default=False)),
                ('shared_library_flag', models.BooleanField(default=False)),
                ('date_created', models.DateTimeField(null=True, blank=True)),
                ('shared_latitude', models.FloatField(null=True, blank=True)),
                ('shared_longitude', models.FloatField(null=True, blank=True)),
                ('shared_point', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_user_deleted', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-date_created'],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Hashtag',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=255)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('is_blocked', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Library',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255, null=True, blank=True)),
                ('url', models.URLField(max_length=255, null=True, blank=True)),
                ('picture_flag', models.BooleanField(default=False)),
                ('picture_path', models.CharField(max_length=255, null=True, blank=True)),
                ('picture_cropped_flag', models.BooleanField(default=False)),
                ('picture_cropped_path', models.CharField(max_length=255, null=True, blank=True)),
                ('subscriber_users_count', models.BigIntegerField(default=0)),
                ('color_1', models.CharField(max_length=255, null=True, blank=True)),
                ('color_2', models.CharField(max_length=255, null=True, blank=True)),
                ('color_3', models.CharField(max_length=255, null=True, blank=True)),
                ('is_reverse_chronological_order', models.BooleanField(default=True)),
                ('is_promoted', models.BooleanField(default=True)),
                ('geographic_target_flag', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_user_deleted', models.BooleanField(default=False)),
                ('date_edited', models.DateTimeField(null=True, blank=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_deleted', models.DateTimeField(null=True, blank=True)),
                ('geographic_target', models.ForeignKey(blank=True, to='location.GeographicTarget', null=True)),
                ('user', models.ForeignKey(related_name='libraries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='LibraryOrder',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('order', models.BigIntegerField(null=True, blank=True)),
                ('is_user_deleted', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('library', models.ForeignKey(related_name='library_order', to='yap.Library')),
                ('user', models.ForeignKey(related_name='library_order', to=settings.AUTH_USER_MODEL)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='LibraryYapOrder',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('order', models.BigIntegerField(null=True, blank=True)),
                ('is_user_deleted', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('library', models.ForeignKey(related_name='library_yap_order', to='yap.Library')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Listen',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('anonymous_user_flag', models.BooleanField(default=False)),
                ('listen_click_count', models.BigIntegerField(default=0)),
                ('time_listened', models.BigIntegerField(null=True, blank=True)),
                ('latitude', models.FloatField(null=True, blank=True)),
                ('longitude', models.FloatField(null=True, blank=True)),
                ('point', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('is_user_deleted', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_deleted', models.DateTimeField(null=True, blank=True)),
                ('user', models.ForeignKey(related_name='listens', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ['-date_created'],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ListenClick',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('time_clicked', models.BigIntegerField()),
                ('latitude', models.FloatField(null=True, blank=True)),
                ('longitude', models.FloatField(null=True, blank=True)),
                ('point', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_user_deleted', models.BooleanField(default=False)),
                ('listen', models.ForeignKey(related_name='listen_clicked', to='yap.Listen')),
                ('user', models.ForeignKey(related_name='user_listen_clicked', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date_created'],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SubscribeLibrary',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('user_subscription_id', models.BigIntegerField(default=1)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_deleted', models.DateTimeField(null=True, blank=True)),
                ('created_latitude', models.FloatField(null=True, blank=True)),
                ('created_longitude', models.FloatField(null=True, blank=True)),
                ('created_point', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('is_unsubscribed', models.BooleanField(default=False)),
                ('date_unsubscribed', models.DateTimeField(null=True, blank=True)),
                ('unsubscribed_latitude', models.FloatField(null=True, blank=True)),
                ('unsubscribed_longitude', models.FloatField(null=True, blank=True)),
                ('unsubscribed_point', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_user_deleted', models.BooleanField(default=False)),
                ('subscribed_library', models.ForeignKey(related_name='subscribed_libraries', to='yap.Library')),
                ('user', models.ForeignKey(related_name='subscribed_libraries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date_created'],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SubscribeUser',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('user_subscription_id', models.BigIntegerField(default=1)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('created_latitude', models.FloatField(null=True, blank=True)),
                ('created_longitude', models.FloatField(null=True, blank=True)),
                ('created_point', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('is_unsubscribed', models.BooleanField(default=False)),
                ('date_unsubscribed', models.DateTimeField(null=True, blank=True)),
                ('unsubscribed_latitude', models.FloatField(null=True, blank=True)),
                ('unsubscribed_longitude', models.FloatField(null=True, blank=True)),
                ('unsubscribed_point', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_user_deleted', models.BooleanField(default=False)),
                ('subscribed_user', models.ForeignKey(related_name='subscribe_user_subscribed_user', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(related_name='subscribe_user_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date_created'],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TwitterShare',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('user_twitter_share', models.BigIntegerField(default=1)),
                ('shared_yap_flag', models.BooleanField(default=False)),
                ('shared_user_flag', models.BooleanField(default=False)),
                ('shared_library_flag', models.BooleanField(default=False)),
                ('date_created', models.DateTimeField(null=True, blank=True)),
                ('shared_latitude', models.FloatField(null=True, blank=True)),
                ('shared_longitude', models.FloatField(null=True, blank=True)),
                ('shared_point', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_user_deleted', models.BooleanField(default=False)),
                ('shared_library', models.ForeignKey(related_name='twitter_shares', to='yap.Library')),
                ('shared_user', models.ForeignKey(related_name='twitter_shares', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date_created'],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='WebsiteUrl',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('url', models.URLField(max_length=255)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Yap',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255, null=True, blank=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_deleted', models.DateTimeField(null=True, blank=True)),
                ('length', models.BigIntegerField()),
                ('hashtags_flag', models.BooleanField(default=False)),
                ('channel_flag', models.BooleanField(default=False)),
                ('libraries_flag', models.BooleanField(default=True)),
                ('audio_path', models.CharField(unique=True, max_length=255)),
                ('picture_flag', models.BooleanField(default=False)),
                ('picture_path', models.CharField(max_length=255, unique=True, null=True, blank=True)),
                ('picture_cropped_flag', models.BooleanField(default=False)),
                ('picture_cropped_path', models.CharField(max_length=255, blank=True)),
                ('listen_count', models.BigIntegerField(default=0)),
                ('website_urls_flag', models.BooleanField(default=False)),
                ('latitude', models.FloatField(null=True, blank=True)),
                ('longitude', models.FloatField(null=True, blank=True)),
                ('point', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('url', models.URLField(max_length=255, null=True, blank=True)),
                ('color_1', models.CharField(max_length=255, null=True, blank=True)),
                ('color_2', models.CharField(max_length=255, null=True, blank=True)),
                ('color_3', models.CharField(max_length=255, null=True, blank=True)),
                ('facebook_shared_flag', models.BooleanField(default=False)),
                ('facebook_account_id', models.BigIntegerField(null=True, blank=True)),
                ('twitter_shared_flag', models.BooleanField(default=False)),
                ('twitter_account_id', models.BigIntegerField(null=True, blank=True)),
                ('google_plus_shared_flag', models.BooleanField(default=False)),
                ('google_plus_account_id', models.BigIntegerField(null=True, blank=True)),
                ('linkedin_shared_flag', models.BooleanField(default=False)),
                ('linkedin_account_id', models.BigIntegerField(null=True, blank=True)),
                ('deleted_date', models.DateTimeField(null=True, blank=True)),
                ('deleted_latitude', models.FloatField(null=True, blank=True)),
                ('deleted_longitude', models.FloatField(null=True, blank=True)),
                ('deleted_point', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('is_private', models.BooleanField(default=False)),
                ('is_draft', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_user_deleted', models.BooleanField(default=False)),
                ('channel', models.ForeignKey(related_name='yaps', blank=True, to='yap.Channel', null=True)),
                ('hashtags', models.ManyToManyField(related_name='yaps', null=True, to='yap.Hashtag', blank=True)),
                ('user', models.ForeignKey(related_name='yaps', to=settings.AUTH_USER_MODEL)),
                ('website_urls', models.ManyToManyField(related_name='yaps', null=True, to='yap.WebsiteUrl', blank=True)),
            ],
            options={
                'ordering': ['-date_created'],
            },
            bases=(models.Model,),
        ),
        migrations.AddField(
            model_name='twittershare',
            name='shared_yap',
            field=models.ForeignKey(related_name='twitter_shares', to='yap.Yap'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='twittershare',
            name='user',
            field=models.ForeignKey(related_name='user_twitter_shares', to=settings.AUTH_USER_MODEL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='listen',
            name='yap',
            field=models.ForeignKey(related_name='listens', to='yap.Yap'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='libraryyaporder',
            name='yap',
            field=models.ForeignKey(related_name='library_yap_order', to='yap.Yap'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='library',
            name='yaps',
            field=models.ManyToManyField(related_name='libraries', to='yap.Yap'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='facebookshare',
            name='shared_library',
            field=models.ForeignKey(related_name='facebook_shares', to='yap.Library'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='facebookshare',
            name='shared_user',
            field=models.ForeignKey(related_name='facebook_shares', to=settings.AUTH_USER_MODEL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='facebookshare',
            name='shared_yap',
            field=models.ForeignKey(related_name='facebook_shares', to='yap.Yap'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='facebookshare',
            name='user',
            field=models.ForeignKey(related_name='user_facebook_shares', to=settings.AUTH_USER_MODEL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='dashboard',
            name='explore_top_libraries',
            field=models.ManyToManyField(related_name='dashboard_explore_top_users', null=True, to='yap.Library', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='dashboard',
            name='explore_top_users',
            field=models.ManyToManyField(related_name='dashboard_explore_top_users', null=True, to=settings.AUTH_USER_MODEL, blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='dashboard',
            name='subscribed_most_listened_libraries',
            field=models.ManyToManyField(related_name='dashboard_most_listened_subscribed', null=True, to='yap.Library', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='dashboard',
            name='subscribed_most_listened_users',
            field=models.ManyToManyField(related_name='dashboard_subscribed_most_listened_users', null=True, to=settings.AUTH_USER_MODEL, blank=True),
            preserve_default=True,
        ),
    ]
